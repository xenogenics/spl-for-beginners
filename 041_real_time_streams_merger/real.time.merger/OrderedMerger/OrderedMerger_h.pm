
package OrderedMerger_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   print '#include <PriorityQueue.h>', "\n";
   print '#include <vector>', "\n";
   print '#include <deque>', "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
     use OrderedMergerCommon;                                                                                                                 
     OrderedMergerCommon::verify($model); 
     my $keyExpr = $model->getParameterByName("key")->getValueAt(0);
     my $keyType = $keyExpr->getCppType();
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '  MY_OPERATOR();', "\n";
   print '  virtual ~MY_OPERATOR();', "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print '  void process(Punctuation const & punct, uint32_t port);', "\n";
   print "\n";
   print 'private:', "\n";
   print '  typedef ';
   print $keyType;
   print ' KeyType;', "\n";
   print '  typedef pf::PriorityQueue<KeyType, uint32_t> KeyHeap;', "\n";
   print '  typedef std::deque<IPort0Type *> TupleQueue;', "\n";
   print '  // Members', "\n";
   print '  bool blocking_;', "\n";
   print '  uint32_t bufferSize_;', "\n";
   print '  uint32_t numDone_;', "\n";
   print '  KeyHeap seenHeap_;', "\n";
   print '  KeyHeap nextHeap_;', "\n";
   print '  Mutex mutex_;', "\n";
   print '  std::vector<CV> cvs_;', "\n";
   print '  std::vector<TupleQueue> queues_;', "\n";
   print '}; ', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
