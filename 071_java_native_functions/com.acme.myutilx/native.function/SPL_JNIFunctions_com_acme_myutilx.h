// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_acme_myutilx_h
#define SPL_JNIFunctions_com_acme_myutilx_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace acme {
namespace myutilx {
class SPL_JNIFunctions {
public:

// Generated from MyJavaFunctions in impl/java/bin/MyJavaFunctions$StreamsModel.class at Sun Mar 29 20:47:13 EDT 2015
static SPL::int32 add(SPL::int32 const & arg1, SPL::int32 const & arg2) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaNativeFunctions", "1.0.1", SPLJAVAFUNCTION_ADL_FILENAME, "impl/java/bin", "MyJavaFunctions", "add", "(II)I", "com.acme.myutilx", "public int32 add(int32, int32)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    SPL::int32 result = env->CallStaticIntMethod(classGlobalRef, mid, arg1, arg2);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    return result;
}

// Generated from MyJavaFunctions in impl/java/bin/MyJavaFunctions$StreamsModel.class at Sun Mar 29 20:47:13 EDT 2015
static SPL::uint32 add(SPL::uint32 const & arg1, SPL::uint32 const & arg2) {
    SPL::int32 result = add((SPL::int32) arg1, (SPL::int32) arg2);
    return (SPL::uint32) result;
}

};
}
}
}
}
}
#endif
