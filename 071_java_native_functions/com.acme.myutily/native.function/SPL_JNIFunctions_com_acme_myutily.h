// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_acme_myutily_h
#define SPL_JNIFunctions_com_acme_myutily_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace acme {
namespace myutily {
class SPL_JNIFunctions {
public:

// Generated from MyJavaFunctions in impl/java/bin/MyJavaFunctions$StreamsModel.class at Sun Mar 29 20:47:13 EDT 2015
static SPL::rstring getUser() {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("JavaNativeFunctions", "1.0.1", SPLJAVAFUNCTION_ADL_FILENAME, "impl/java/bin", "MyJavaFunctions", "getUser", "()Ljava/lang/String;", "com.acme.myutily", "public rstring getUser()", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring resObj = (jstring) env->CallStaticObjectMethod(classGlobalRef, mid);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    if (resObj != NULL) {
        const jchar *chars = env->GetStringChars(resObj, NULL);
        if (chars == NULL)
            SPL::SPLJavaFunction::throwCreateError(func);
        SPL::ustring result((const UChar *) chars, (int32_t) env->GetStringLength(resObj));
        env->ReleaseStringChars(resObj, chars);
        env->DeleteLocalRef(resObj);
        return SPL::ustring::toUTF8(result);
    } else {
        return SPL::rstring("");
    }
}

};
}
}
}
}
}
#endif
