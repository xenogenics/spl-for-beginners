// DO NOT EDIT THIS FILE - it is machine generated
#ifndef SPL_JNIFunctions_com_acme_test_email_h
#define SPL_JNIFunctions_com_acme_test_email_h

#include <SPL/Runtime/Function/SPLJavaFunction.h>
#include <SPL/Runtime/Type/SPLType.h>

namespace SPL {
namespace JNIFunctions {
namespace com {
namespace acme {
namespace test {
namespace email {
class SPL_JNIFunctions {
public:

// Generated from com.acme.test.email.sender.EmailSender in impl/java/bin/com/acme/test/email/sender/EmailSender$StreamsModel.class at Mon Mar 30 16:18:24 EDT 2015
static void sendEmail(SPL::ustring const & arg1, SPL::ustring const & arg2, SPL::ustring const & arg3, SPL::ustring const & arg4, SPL::ustring const & arg5) {
    static __thread void *func;
    static __thread jclass classGlobalRef;
    static __thread jmethodID mid;
    if (func == NULL) {
        func = SPL::SPLJavaFunction::loadFunction("087_email_alerts_via_java_native_function", "1.0.1", SPLJAVAFUNCTION_ADL_FILENAME, "impl/java/bin", "com.acme.test.email.sender.EmailSender", "sendEmail", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "com.acme.test.email", "<string T> public void sendEmail(T, T, T, T, T)", &classGlobalRef, &mid);
    }
    JNIEnv* env = SPL::SPLJavaFunction::getJNIEnv(func);
    jstring obj1 = env->NewString((jchar *) arg1.getBuffer(), (jsize) arg1.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj2 = env->NewString((jchar *) arg2.getBuffer(), (jsize) arg2.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj3 = env->NewString((jchar *) arg3.getBuffer(), (jsize) arg3.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj4 = env->NewString((jchar *) arg4.getBuffer(), (jsize) arg4.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    jstring obj5 = env->NewString((jchar *) arg5.getBuffer(), (jsize) arg5.length());
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCreateError(func);
    env->CallStaticVoidMethod(classGlobalRef, mid, obj1, obj2, obj3, obj4, obj5);
    if (env->ExceptionCheck())
        SPL::SPLJavaFunction::throwCallError(func);
    env->DeleteLocalRef(obj1);
    env->DeleteLocalRef(obj2);
    env->DeleteLocalRef(obj3);
    env->DeleteLocalRef(obj4);
    env->DeleteLocalRef(obj5);
}

// Generated from com.acme.test.email.sender.EmailSender in impl/java/bin/com/acme/test/email/sender/EmailSender$StreamsModel.class at Mon Mar 30 16:18:24 EDT 2015
static void sendEmail(SPL::rstring const & arg1, SPL::rstring const & arg2, SPL::rstring const & arg3, SPL::rstring const & arg4, SPL::rstring const & arg5) {
    sendEmail(SPL::ustring::fromUTF8(arg1), SPL::ustring::fromUTF8(arg2), SPL::ustring::fromUTF8(arg3), SPL::ustring::fromUTF8(arg4), SPL::ustring::fromUTF8(arg5));
}

// Generated from com.acme.test.email.sender.EmailSender in impl/java/bin/com/acme/test/email/sender/EmailSender$StreamsModel.class at Mon Mar 30 16:18:24 EDT 2015
template <SPL::int32 msize>
static void sendEmail(SPL::bstring<msize> const & arg1, SPL::bstring<msize> const & arg2, SPL::bstring<msize> const & arg3, SPL::bstring<msize> const & arg4, SPL::bstring<msize> const & arg5) {
    sendEmail((SPL::rstring) arg1, (SPL::rstring) arg2, (SPL::rstring) arg3, (SPL::rstring) arg4, (SPL::rstring) arg5);
}

};
}
}
}
}
}
}
#endif
